/* Auto-generated by genmsg_cpp for file /home/will/ros/bow_extract/msg/cvKeypoint.msg */
#ifndef BOW_EXTRACT_MESSAGE_CVKEYPOINT_H
#define BOW_EXTRACT_MESSAGE_CVKEYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace bow_extract
{
template <class ContainerAllocator>
struct cvKeypoint_ {
  typedef cvKeypoint_<ContainerAllocator> Type;

  cvKeypoint_()
  : x(0.0)
  , y(0.0)
  , size(0.0)
  , angle(0.0)
  , response(0.0)
  , octave(0)
  , class_id(0)
  {
  }

  cvKeypoint_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , size(0.0)
  , angle(0.0)
  , response(0.0)
  , octave(0)
  , class_id(0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _size_type;
  float size;

  typedef float _angle_type;
  float angle;

  typedef float _response_type;
  float response;

  typedef uint32_t _octave_type;
  uint32_t octave;

  typedef uint32_t _class_id_type;
  uint32_t class_id;


private:
  static const char* __s_getDataType_() { return "bow_extract/cvKeypoint"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8b07dc95f1d47d4617cf6f35ce31d104"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 x\n\
float32 y\n\
float32 size\n\
float32 angle\n\
float32 response\n\
uint32 octave\n\
uint32 class_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, size);
    ros::serialization::serialize(stream, angle);
    ros::serialization::serialize(stream, response);
    ros::serialization::serialize(stream, octave);
    ros::serialization::serialize(stream, class_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, size);
    ros::serialization::deserialize(stream, angle);
    ros::serialization::deserialize(stream, response);
    ros::serialization::deserialize(stream, octave);
    ros::serialization::deserialize(stream, class_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(size);
    size += ros::serialization::serializationLength(angle);
    size += ros::serialization::serializationLength(response);
    size += ros::serialization::serializationLength(octave);
    size += ros::serialization::serializationLength(class_id);
    return size;
  }

  typedef boost::shared_ptr< ::bow_extract::cvKeypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bow_extract::cvKeypoint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cvKeypoint
typedef  ::bow_extract::cvKeypoint_<std::allocator<void> > cvKeypoint;

typedef boost::shared_ptr< ::bow_extract::cvKeypoint> cvKeypointPtr;
typedef boost::shared_ptr< ::bow_extract::cvKeypoint const> cvKeypointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::bow_extract::cvKeypoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::bow_extract::cvKeypoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace bow_extract

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bow_extract::cvKeypoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bow_extract::cvKeypoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bow_extract::cvKeypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b07dc95f1d47d4617cf6f35ce31d104";
  }

  static const char* value(const  ::bow_extract::cvKeypoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b07dc95f1d47d46ULL;
  static const uint64_t static_value2 = 0x17cf6f35ce31d104ULL;
};

template<class ContainerAllocator>
struct DataType< ::bow_extract::cvKeypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bow_extract/cvKeypoint";
  }

  static const char* value(const  ::bow_extract::cvKeypoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bow_extract::cvKeypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 size\n\
float32 angle\n\
float32 response\n\
uint32 octave\n\
uint32 class_id\n\
\n\
";
  }

  static const char* value(const  ::bow_extract::cvKeypoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bow_extract::cvKeypoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bow_extract::cvKeypoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.size);
    stream.next(m.angle);
    stream.next(m.response);
    stream.next(m.octave);
    stream.next(m.class_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cvKeypoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bow_extract::cvKeypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::bow_extract::cvKeypoint_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "response: ";
    Printer<float>::stream(s, indent + "  ", v.response);
    s << indent << "octave: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.octave);
    s << indent << "class_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.class_id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BOW_EXTRACT_MESSAGE_CVKEYPOINT_H

